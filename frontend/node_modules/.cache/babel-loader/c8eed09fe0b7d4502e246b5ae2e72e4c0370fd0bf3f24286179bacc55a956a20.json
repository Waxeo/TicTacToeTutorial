{"ast":null,"code":"// import { useState } from \"react\"; // Garde en mémoire des états & valeurs\n\n// function Square({ value, onSquareClick }) {\n\n//   return (\n//     <button className=\"square\" onClick={onSquareClick}>\n//       {value}\n//     </button>);\n// }\n\n// function Board({ xIsNext, squares, onPlay }) {\n\n//   function handleClick(i) {\n\n//     if (squares[i] || calculateWinner(squares)) { return; }\n\n//     const nextSquares = squares.slice(); // slice == copy du tab initial\n\n//     if (xIsNext) {\n//       nextSquares[i] = \"X\";\n//     } else {\n//       nextSquares[i] = \"O\";\n//     }\n\n//     onPlay(nextSquares);\n//   }\n\n//   const winner = calculateWinner(squares);\n//   let status;\n\n//   if (winner) {\n//     status = winner + \" a gagné\";\n//   } else {\n//     status = \"Prochain tour : \" + (xIsNext ? \"X\" : \"O\");\n//   }\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board-row\"> {/* Création d'une ligne (suivie par 3 colones \"Square\") */}\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//     </>\n//   );\n// }\n\n// export default function Game() {\n\n//   const [xIsNext, setXIsNext] = useState(true)\n//   const [history, setHistory] = useState(Array(9).fill(null));\n//   const currentSquares = history[history.length - 1];\n\n//   function handlePlay(nextSquares) {\n//     setHistory([...history, nextSquares]);\n//     setXIsNext(!xIsNext);\n//   }\n\n//   return (\n//     <div className=\"game\">\n//       <div className=\"game-board\">\n//         <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n//       </div>\n//       <div className=\"game-info\">\n//         <ol>{}</ol>\n//       </div>\n//     </div>\n//   )\n// }\n\n// function calculateWinner(squares) {\n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6]\n//   ];\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }","map":{"version":3,"names":[],"sources":["/Users/mgauvrit/Downloads/Unknown 2/src/App.js"],"sourcesContent":["// import { useState } from \"react\"; // Garde en mémoire des états & valeurs\n\n// function Square({ value, onSquareClick }) {\n\n//   return (\n//     <button className=\"square\" onClick={onSquareClick}>\n//       {value}\n//     </button>);\n// }\n\n// function Board({ xIsNext, squares, onPlay }) {\n\n//   function handleClick(i) {\n\n//     if (squares[i] || calculateWinner(squares)) { return; }\n\n//     const nextSquares = squares.slice(); // slice == copy du tab initial\n\n//     if (xIsNext) {\n//       nextSquares[i] = \"X\";\n//     } else {\n//       nextSquares[i] = \"O\";\n//     }\n\n//     onPlay(nextSquares);\n//   }\n\n//   const winner = calculateWinner(squares);\n//   let status;\n\n//   if (winner) {\n//     status = winner + \" a gagné\";\n//   } else {\n//     status = \"Prochain tour : \" + (xIsNext ? \"X\" : \"O\");\n//   }\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board-row\"> {/* Création d'une ligne (suivie par 3 colones \"Square\") */}\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//     </>\n//   );\n// }\n\n// export default function Game() {\n\n//   const [xIsNext, setXIsNext] = useState(true)\n//   const [history, setHistory] = useState(Array(9).fill(null));\n//   const currentSquares = history[history.length - 1];\n\n//   function handlePlay(nextSquares) {\n//     setHistory([...history, nextSquares]);\n//     setXIsNext(!xIsNext);\n//   }\n\n//   return (\n//     <div className=\"game\">\n//       <div className=\"game-board\">\n//         <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n//       </div>\n//       <div className=\"game-info\">\n//         <ol>{}</ol>\n//       </div>\n//     </div>\n//   )\n// }\n\n// function calculateWinner(squares) {\n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6]\n//   ];\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}